/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 09 04:28:01 GMT 2018
 */

package org.jabref.logic.bibtexkeypattern;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jabref.logic.bibtexkeypattern.BibtexKeyGenerator;
import org.jabref.logic.bibtexkeypattern.BibtexKeyPatternPreferences;
import org.jabref.model.bibtexkeypattern.GlobalBibtexKeyPattern;
import org.jabref.model.database.BibDatabase;
import org.jabref.model.database.BibDatabaseContext;
import org.jabref.model.entry.BibEntry;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BibtexKeyGenerator_ESTest extends BibtexKeyGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String string0 = BibtexKeyGenerator.cleanKey("", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        BibtexKeyGenerator.cleanKey((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jabref.logic.bibtexkeypattern.BibtexKeyGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String string0 = BibtexKeyGenerator.cleanKey("A.\"tW_yq>iR ", false);
      assertEquals("A.tW_yq>iR", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String string0 = BibtexKeyGenerator.cleanKey(", context=", true);
      assertEquals("context=", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BibtexKeyGenerator bibtexKeyGenerator0 = null;
      try {
        bibtexKeyGenerator0 = new BibtexKeyGenerator((BibDatabaseContext) null, (BibtexKeyPatternPreferences) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jabref.logic.bibtexkeypattern.BibtexKeyGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        BibtexKeyGenerator.generateKey((BibEntry) null, ".^T&qB({");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/eventbus/EventBus
         //
         verifyException("org.jabref.model.database.BibDatabase", e);
      } catch(NullPointerException e) {
          //
          // no message in exception (getMessage() returned null)
          //
          verifyException("org.jabref.logic.bibtexkeypattern.BibtexKeyGenerator", e);
       }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      GlobalBibtexKeyPattern globalBibtexKeyPattern0 = GlobalBibtexKeyPattern.fromPattern("kB12=");
      Character character0 = Character.valueOf('p');
      BibtexKeyPatternPreferences bibtexKeyPatternPreferences0 = new BibtexKeyPatternPreferences("kB12=", "(0oPSasC+h", false, false, true, globalBibtexKeyPattern0, character0);
      BibtexKeyGenerator bibtexKeyGenerator0 = null;
      try {
        bibtexKeyGenerator0 = new BibtexKeyGenerator(globalBibtexKeyPattern0, (BibDatabase) null, bibtexKeyPatternPreferences0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }
}
